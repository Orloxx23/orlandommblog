---
import type { CollectionEntry } from "astro:content";
import FormattedDate from "../components/FormattedDate.astro";
import BaseLayout from "./BaseLayout.astro";
import TableOfContent from "../components/TableOfContent.astro";
import ScrollToTopButton from "../components/ScrollToTopButton";

type Blog = CollectionEntry<"blog">["data"];

type Heading = {
  depth: number;
  slug: string;
  text: string;
};

export interface Props extends Blog {
  readingTime: string;
  headings: Heading[];
}

const {
  title,
  description,
  tags,
  pubDate,
  updatedDate,
  heroImage,
  heroImageAlt,
  readingTime,
  headings,
} = Astro.props;
---

<BaseLayout title={title} description={description} postMeta={{ pubDate, tags }}>
  <div
    class="prose prose-slate max-w-none prose-a:underline-offset-2 prose-a:decoration-blue-600 prose-img:rounded-xl dark:prose-invert"
  >
    <h1>{title}</h1>
    <div class="font-semibold text-xs uppercase space-y-2">
      <div class="flex flex-wrap items-center space-x-1">
        <span>
          Published on <FormattedDate date={pubDate} />
        </span>
        {
          updatedDate && (
            <>
              <span>{"•"}</span>
              <span>
                Updated on <FormattedDate date={updatedDate} />
              </span>
            </>
          )
        }
        <span>{"•"}</span>
        <span>{readingTime}</span>
      </div>
      <div class="flex space-x-2 items-center">
        {
          tags.map((tag) => (
            <a
              href={`/tags/${tag.slice(1)}`}
              class="no-underline bg-slate-700 hover:bg-slate-600 p-1 px-2 rounded-sm"
            >
              {tag}
            </a>
          ))
        }
      </div>
    </div>
    {heroImage && <img src={heroImage} alt={heroImageAlt} />}
    <div class="md:flex space-x-10">
      <article class="w-full">
        <slot />
      </article>

      {
        headings.length > 0 && (
          <nav class="hidden text-sm py-6 space-y-2 lg:block lg:w-4/12 h-screen sticky top-0">
            <span class="text-blue-400 uppercase">On This Page</span>
            <TableOfContent headings={headings} />
            <div class="border-b-[0.5px]" />
            <div class="flex float-right">
              <ScrollToTopButton client:idle />
            </div>
          </nav>
        )
      }
    </div>
  </div>
</BaseLayout>

<script>
  const codeBlocks = Array.from(document.querySelectorAll("div[data-rehype-pretty-code-fragment]"));

  for (let codeBlock of codeBlocks) {
    const codeBlockPre = codeBlock.getElementsByTagName("pre")[0];

    // Copy button
    const copyButton = document.createElement("button");
    copyButton.className = "p-1 px-2 rounded-md text-xs bg-slate-800 hover:bg-slate-700";
    copyButton.innerHTML = "Copy";

    // Header title
    const titleSpan = document.createElement("span");
    titleSpan.className = "text-blue-400";

    // Header div
    const headerDiv = document.createElement("div");
    headerDiv.className =
      "flex w-full bg-slate-950 border-b-[0.5px] border-blue-400 rounded-t-lg mt-10 text-base items-center justify-between py-2 px-4";

    // Current title
    const titleDiv = codeBlock.querySelector("div[data-rehype-pretty-code-title]");

    // Set title to the language name if no current title is set
    if (titleDiv) {
      const title = titleDiv.innerHTML;
      titleSpan.innerHTML = title;
      codeBlock.removeChild(titleDiv);
    } else {
      titleSpan.innerHTML = codeBlockPre.getAttribute("data-language") as string;
    }

    headerDiv.appendChild(titleSpan);
    headerDiv.appendChild(copyButton);
    codeBlock.prepend(headerDiv);

    copyButton.addEventListener("click", async () => {
      await copyCode(codeBlock, copyButton);
    });
  }

  async function copyCode(block: Element, button: HTMLButtonElement) {
    const code = block.querySelector("code") as HTMLElement;
    const text = code.innerText as string;
    await navigator.clipboard.writeText(text);
    button.innerText = "Copied!";

    setTimeout(() => {
      button.innerText = "Copy";
    }, 750);
  }
</script>

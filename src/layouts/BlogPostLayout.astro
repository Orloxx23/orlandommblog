---
import type { CollectionEntry } from "astro:content";
import FormattedDate from "../components/FormattedDate.astro";
import BaseLayout from "./BaseLayout.astro";

type Props = CollectionEntry<"blog">["data"];

const { title, description, tags, pubDate, updatedDate, ogImage, ogImageAlt } = Astro.props;
---

<BaseLayout title={title} description={description}>
  <article
    class="prose max-w-none prose-slate prose-a:underline-offset-2 prose-a:decoration-blue-600 dark:prose-invert"
  >
    <h1 class="text-4xl text-white">{title}</h1>
    <div class="space-y-3">
      <div class="flex flex-col font-bold text-xs uppercase space-y-1">
        <span>
          Published on <FormattedDate date={pubDate} />
        </span>
        {
          updatedDate && (
            <span>
              Updated on <FormattedDate date={updatedDate} />
            </span>
          )
        }
      </div>
      <div class="flex space-x-2 items-center font-bold text-xs uppercase">
        {
          tags.map((tag) => (
            <a
              href={`/tags/${tag}`}
              class="no-underline bg-slate-500/30 hover:bg-slate-500/50 p-1 px-3 rounded-sm"
            >
              {tag}
            </a>
          ))
        }
      </div>
    </div>
    {ogImage && <img src={ogImage} alt={ogImageAlt} />}
    <slot />
  </article>
</BaseLayout>

<script>
  const codeBlocks = Array.from(document.querySelectorAll("div[data-rehype-pretty-code-fragment]"));

  for (let codeBlock of codeBlocks) {
    const codeBlockPre = codeBlock.getElementsByTagName("pre")[0];

    // Copy button
    const copyButton = document.createElement("button");
    copyButton.className =
      "p-1 px-2 rounded-md text-xs text-slate-300 bg-slate-800 hover:bg-slate-700";
    copyButton.innerHTML = "Copy";

    // Header title
    const titleSpan = document.createElement("span");
    titleSpan.className = "text-blue-400";

    // Header div
    const headerDiv = document.createElement("div");
    headerDiv.className = "flex w-full text-base items-center justify-between py-2 px-4";

    // Current title
    const titleDiv = codeBlock.querySelector("div[data-rehype-pretty-code-title]");

    // Set title to the language name if no current title is set
    if (titleDiv) {
      const title = titleDiv.innerHTML;
      titleSpan.innerHTML = title;
      codeBlock.removeChild(titleDiv);
    } else {
      titleSpan.innerHTML = codeBlockPre.getAttribute("data-language") as string;
    }

    headerDiv.appendChild(titleSpan);
    headerDiv.appendChild(copyButton);
    codeBlockPre.prepend(headerDiv);

    copyButton.addEventListener("click", async () => {
      await copyCode(codeBlock, copyButton);
    });
  }

  async function copyCode(block: Element, button: HTMLButtonElement) {
    const code = block.querySelector("code") as HTMLElement;
    const text = code.innerText as string;
    await navigator.clipboard.writeText(text);
    button.innerText = "Copied!";

    setTimeout(() => {
      button.innerText = "Copy";
    }, 750);
  }
</script>
